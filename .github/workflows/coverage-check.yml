name: PR Coverage Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage

      - name: Extract coverage and prepare data
        id: extract
        run: |
          COVERAGE_JSON="coverage/coverage-final.json"

          # Total lines and covered lines
          TOTAL_LINES=$(jq '[.[] | .lines.total] | add' "$COVERAGE_JSON")
          TOTAL_COVERED=$(jq '[.[] | .lines.covered] | add' "$COVERAGE_JSON")

          # Guard against division by zero
          if [ "$TOTAL_LINES" -eq 0 ]; then
            COVERAGE=0
          else
            COVERAGE=$(echo "scale=2; 100 * $TOTAL_COVERED / $TOTAL_LINES" | bc)
          fi

          echo "Total coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_OUTPUT

          # Identify under-tested files
          jq 'to_entries | map(select(.value.lines.pct < 80)) | from_entries' "$COVERAGE_JSON" > under_tested.json

          # Load JSON safely as string
          UNDER_TESTED=$(cat under_tested.json | jq -c .)
          echo "UNDER_TESTED=$UNDER_TESTED" >> $GITHUB_ENV
          echo "UNDER_TESTED=$UNDER_TESTED" >> $GITHUB_OUTPUT

          # Check if coverage is OK
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "COVERAGE_OK=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_OK=false" >> $GITHUB_ENV
          fi

      - name: Post to n8n
        run: |
          curl -X POST https://shrutisharma40.app.n8n.cloud/webhook/vitest-coverage \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --argjson pr_number "${{ github.event.pull_request.number }}" \
              --arg sha "${{ github.sha }}" \
              --arg coverage "$COVERAGE" \
              --argjson under_tested "$UNDER_TESTED" \
              '{pr_number: $pr_number, sha: $sha, coverage: ($coverage | tonumber), under_tested: $under_tested}')"

      - name: Fail if below threshold
        run: |
          echo "‚ùå Test coverage is below 80%. Current: $COVERAGE%"
          exit 1
        if: env.COVERAGE_OK == 'false'
