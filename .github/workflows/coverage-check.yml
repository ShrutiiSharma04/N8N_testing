name: PR Coverage Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage

      - name: Extract coverage and prepare data
        id: extract
        run: |
          COVERAGE_JSON="coverage/coverage-final.json"

          # Save under-tested files (<80% line coverage)
          jq 'to_entries | map(select(.value.lines.pct < 80)) | from_entries' $COVERAGE_JSON > under_tested.json

          # Calculate total line coverage
          TOTAL_COVERED=$(jq '[.[] | .lines.covered] | add' $COVERAGE_JSON)
          TOTAL_LINES=$(jq '[.[] | .lines.total] | add' $COVERAGE_JSON)

          if [ "$TOTAL_LINES" -eq 0 ]; then
            COVERAGE=0
          else
            COVERAGE=$(echo "scale=2; $TOTAL_COVERED * 100 / $TOTAL_LINES" | bc)
          fi

          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_OUTPUT
          echo "UNDER_TESTED=$(cat under_tested.json)" >> $GITHUB_ENV

      - name: Debug payload before posting
        run: |
          echo "Debugging payload to n8n:"
          jq -n \
            --argjson pr_number "${{ github.event.pull_request.number }}" \
            --arg sha "${{ github.sha }}" \
            --argjson coverage "$COVERAGE" \
            --argjson under_tested "$(cat under_tested.json)" \
            '{pr_number: $pr_number, sha: $sha, coverage: $coverage, under_tested: $under_tested}'

      - name: Post to n8n webhook
        run: |
          curl -X POST https://shrutisharma404.app.n8n.cloud/webhook/vitest-coverage \
          -H "Content-Type: application/json" \
          -d "$(jq -n \
            --argjson pr_number "${{ github.event.pull_request.number }}" \
            --arg sha "${{ github.sha }}" \
            --argjson coverage "$COVERAGE" \
            --argjson under_tested "$(cat under_tested.json)" \
            '{pr_number: $pr_number, sha: $sha, coverage: $coverage, under_tested: $under_tested}')"

      - name: Fail if coverage < 80%
        run: |
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Test coverage is below 80%. Current: $COVERAGE%"
            exit 1
          else
            echo "✅ Test coverage is sufficient: $COVERAGE%"
          fi
