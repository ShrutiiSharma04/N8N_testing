name: PR Coverage Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage

      - name: Extract coverage and prepare data
        id: extract
        run: |
          COVERAGE_JSON="coverage/coverage-final.json"

          # Calculate statement coverage from .s blocks
          COVERED=$(jq '[.[] | .s | to_entries[] | select(.value > 0)] | length' "$COVERAGE_JSON")
          TOTAL=$(jq '[.[] | .s | to_entries[]] | length' "$COVERAGE_JSON")

          if [ "$TOTAL" -gt 0 ]; then
            COVERAGE=$(echo "scale=2; $COVERED / $TOTAL * 100" | bc)
          else
            COVERAGE="0.00"
          fi

          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

          # Store under-tested files
          jq 'to_entries | map(select(.value.s != null and ([.value.s[]] | any(. == 0)))) | from_entries' "$COVERAGE_JSON" > under_tested.json

          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "COVERAGE_OK=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_OK=false" >> $GITHUB_ENV
          fi

      - name: Load ENV vars for curl step
        run: |
          echo "COVERAGE=$COVERAGE" >> $GITHUB_OUTPUT
          echo "COVERAGE_OK=$COVERAGE_OK" >> $GITHUB_OUTPUT
        id: vars

      - name: Post to n8n (always runs)
        if: always()
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA: ${{ github.sha }}
        run: |
          UNDER_TESTED=$(cat under_tested.json)

          curl -X POST https://shrutisharma404.app.n8n.cloud/webhook/vitest-coverage \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --argjson pr_number "${{ env.PR_NUMBER }}" \
              --arg sha "${{ env.SHA }}" \
              --arg coverage "${{ steps.extract.outputs.COVERAGE }}" \
              --arg coverage_ok "${{ steps.extract.outputs.COVERAGE_OK }}" \
              --argjson under_tested "$UNDER_TESTED" \
              '{pr_number: $pr_number, sha: $sha, coverage: $coverage, coverage_ok: ($coverage_ok == "true"), under_tested: $under_tested}')"

      - name: Debug Coverage Output
        run: echo "üîç Total coverage: $COVERAGE%"

      - name: Fail if coverage < 80%
        if: env.COVERAGE_OK != 'true'
        run: |
          echo "‚ùå Test coverage is below 80%. Current: $COVERAGE%"
          exit 1

