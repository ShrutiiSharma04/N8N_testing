name: PR Coverage Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage

      - name: Extract coverage and prepare data
        id: extract
        run: |
          COVERAGE_JSON="coverage/coverage-final.json"

          COVERED=$(jq '[.[] | .lines.covered] | add' "$COVERAGE_JSON")
          TOTAL=$(jq '[.[] | .lines.total] | add' "$COVERAGE_JSON")

          if [ "$TOTAL" -gt 0 ]; then
            COVERAGE=$(echo "scale=2; $COVERED / $TOTAL * 100" | bc)
          else
            COVERAGE="0.00"
          fi

          # Save to output using echo
          echo "coverage=$COVERAGE" >> "$GITHUB_OUTPUT"

          # Save under-tested files JSON
          jq 'to_entries | map(select(.value.lines.pct < 80)) | from_entries' "$COVERAGE_JSON" > under_tested.json

          # Determine if coverage passes
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "coverage_ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "coverage_ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Post to n8n
        if: always()
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA: ${{ github.sha }}
        run: |
          UNDER_TESTED=$(cat under_tested.json)
          COVERAGE="${{ steps.extract.outputs.coverage }}"
          COVERAGE_OK="${{ steps.extract.outputs.coverage_ok }}"

          curl -X POST https://shrutisharma404.app.n8n.cloud/webhook/vitest-coverage \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --argjson pr_number "$PR_NUMBER" \
              --arg sha "$SHA" \
              --arg coverage "$COVERAGE" \
              --argjson coverage_ok "$(test "$COVERAGE_OK" = 'true' && echo true || echo false)" \
              --argjson under_tested "$UNDER_TESTED" \
              '{pr_number: $pr_number, sha: $sha, coverage: ($coverage | tonumber), coverage_ok: $coverage_ok, under_tested: $under_tested}')"

      - name: Fail if coverage < 80%
        if: steps.extract.outputs.coverage_ok != 'true'
        run: |
          echo "❌ Test coverage is below 80%. Current: ${{ steps.extract.outputs.coverage }}%"
          exit 1


