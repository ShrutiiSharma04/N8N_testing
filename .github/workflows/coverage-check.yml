name: PR Coverage Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage

      - name: Extract coverage and prepare data
        id: extract
        run: |
          COVERAGE_JSON="coverage/coverage-final.json"

          # Dynamically compute total % coverage
          TOTAL_COVERED=$(jq '[.[] | .lines.covered] | add as $c | [.[] | .lines.total] | add as $t | ($c / $t * 100)' "$COVERAGE_JSON")
          echo "Total coverage: $TOTAL_COVERED"

          echo "COVERAGE=$TOTAL_COVERED" >> $GITHUB_ENV

          # Store under-tested file list
          jq 'to_entries | map(select(.value.lines.pct < 80)) | from_entries' "$COVERAGE_JSON" > under_tested.json

          if (( $(echo "$TOTAL_COVERED >= 80" | bc -l) )); then
            echo "COVERAGE_OK=true" >> $GITHUB_ENV
          else
            echo "COVERAGE_OK=false" >> $GITHUB_ENV
          fi

      - name: Post to n8n (even if failing)
        if: always()
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA: ${{ github.sha }}
          COVERAGE: ${{ env.COVERAGE }}
          COVERAGE_OK: ${{ env.COVERAGE_OK }}
        run: |
          echo "Posting to n8n..."
          UNDER_TESTED=$(cat under_tested.json)

          curl -X POST https://shrutisharma40.app.n8n.cloud/webhook/vitest-coverage \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg pr_number "$PR_NUMBER" \
              --arg sha "$SHA" \
              --arg coverage_ok "$COVERAGE_OK" \
              --argjson under_tested "$UNDER_TESTED" \
              '{pr_number: ($pr_number | tonumber), sha: $sha, coverage_ok: ($coverage_ok == "true"), under_tested: $under_tested}')"

      - name: Fail if coverage < 80%
        if: env.COVERAGE_OK != 'true'
        run: |
          echo "❌ Test coverage is below 80%. Current: $COVERAGE%"
          exit 1

